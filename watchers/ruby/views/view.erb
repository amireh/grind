<% content_for :js do %>
<script>
  var group = "<%= @group %>";
  var klass = "<%= @klass %>";
  var view = "<%= @view %>";

  var format_entry = function(msg) {
    html = "<tr>";
    $("table thead th").each(function() {
      var k = $(this).html();
      var v = msg.entry[k];
      html += "<td data-name=\"" + k + "\">" + v + "</td>";
      
    })
    // $.each(msg.entry, function(k,v) {
    //   html += "<td data-name=\"" + k + "\">" + v + "</td>";
    // });
    html += "</tr>"
    $("table tbody").append(html);
    ui.add_entry($("table tbody tr:last"));    
  }

  var populated = false;
  grind.on_connected(function() {
    grind.subscribe(group, klass, view, function() {
      if (populated) return;
      populated = true; 

      grind.dispatch("query_view", { group: group, klass: klass, view: view }, function(msg) {
        // populate the table headings
        html = "";
        $.each(msg.result, function(_, column) {
          html += "<th>" + column + "</th>";
        });
        $("table thead > tr:first").append(html);

        // sorttable.init();
        sorttable.makeSortable($("table:first").get(0));

        // popoulate the feed filter fields
        var i = 0;
        var feed = msg.result;
        var last_el = null;
        var elements = $("[data-feed=query_view]");
        var delta = feed.length - elements.length;
        if (delta > 0) {
          var last_el = $(elements[elements.length-1]);
          for (var di = 0; di < delta; ++di) {
            var clone = last_el.clone();
            last_el.after(clone);
            elements.push(clone);
          }
        }

        elements.each(function() {
          last_el = $(this);
          // var targets = JSON.parse($(this).attr("data-feed-target") || "");
          var targets = ($(this).attr("data-feed-target") || "").split(',');
          for (var ti = 0; ti < targets.length; ++ti) {
            var target = targets[ti];
            if (target == "text") {
              $(this).html(feed[i]);
            } else {
              $(this).attr(target, feed[i]);
            }
          }
          if (++i > feed.length) return false;
        });

        // $("[data-dyn-target=filters]:not([data-dyn-action])").click();
      });    
      
    });

    grind.on_message(function(msg) {
      if (msg.group != group || msg.klass != klass || msg.view != view) {
        console.log("not a message for us, discarding");
        return;
      }

      format_entry(msg);
    });

  });

$(function() {
  var process_filter_value = function(value) {
    if (value[0] == '/' && value.length > 1 && value[value.length-1] == '/')
      return { is_regex: true, value: value.substring(1, value.length-1) };
    // \/something/ => not a regex, escape (remove) the leading '/'
    else if (value[0] == '\\' && value[1] == '/')
      return { is_regex: false, value: value.substring(1, value.length) }
    // something => regular text
    else
      return { is_regex: false, value: value }
  }
  $("#fetch").click(function() {
    $("#clear").click();
    var hide_feed_options = false;
    if ($("#feed_options").is(":hidden")) {
      $("#feed_options").show();
      hide_feed_options = true;
    }


    var type = "GET";
    var data = { limit: $("#feed_limit").attr("value") };
    var filters = $("[data-dyn-entity=filters]:visible");

    if (filters.length > 0) {
      type = "POST";
      data.query = {};
      // extract the filter values and sanitize them if necessary
      filters.each(function() {
        var field = $(this).find("option:selected").attr("value");
        var value = $(this).find("input[type=text]").attr("value");
        var is_negated = $(this).find("input[type=checkbox]").attr("checked") ? true : false;
        var processed = process_filter_value(value);
        if (processed.is_regex)
          data.query["entry." + field] = JSON.stringify({ "$regex": processed.value });
        else {
          var op = (is_negated ? "$nin" : "$in");
          var value = {}; value[op] = [ processed.value ];
          data.query["entry." + field] = JSON.stringify(value);
        }
      });
    }

    $.ajax({
      type: type,
      url: "http://localhost:11146/" + group + "/" + klass + "/" + view,
      data: data,
      success: function(feed) {
        console.log(feed);
        // feed = JSON.parse(feed);
        for (var i = 0; i < feed.length; ++i)
          format_entry(feed[i]);
      }
    });

    if (hide_feed_options)
      $("#feed_options").hide();
  }); // #fetch.click()

  $("#save_filters").click(function() {
    var filters = $("[data-dyn-entity=filters]:visible");

    if (filters.length > 0) {
      type = "POST";
      var query = {};
      // extract the filter values and sanitize them if necessary
      filters.each(function() {
        var field = $(this).find("option:selected").attr("value");
        var value = $(this).find("input[type=text]").attr("value");
        var is_negated = $(this).find("input[type=checkbox]").attr("checked") ? true : false;
        query[field] = process_filter_value(value);
        query[field].is_negated = is_negated;
      });

      grind.dispatch("add_filters", query);
    }
  });
  // hide the feed options
  $("[data-dyn-action=toggle][data-dyn-target=feed_options]").click();


})

</script>
<% end %>

<% content_for :actions do %>
  <button id="fetch">fetch</button>
<% end %>

<% content_for :nav do %>
<h2><%= [ "<a href='/#{@group}'>#{@group}</a>", 
          "<a href='/#{@group}/#{@klass}'>#{@klass}</a>", 
          @view ].join(' >> ') %>
</h2>
<% end %>

<h2>Feed options
  <button data-dyn-action="toggle" data-dyn-target="feed_options" data-alt-text="&plus; show">&minus; hide</button>
</h2>
<div id="feed_options">
  <label>Maximum number of entries to retrieve: 
    <input type="number" value="500" step="100" id="feed_limit" min="1" max="2000" />
  </label>
  <h3>Feed filters
    <button data-dyn-target="filters">&plus; Add a filter</button>
  </h3>
  <p class="usage_tip"><em>Tip: </em> feed filters support <a href="http://pcre.org">PCRE</a> regular expressions.
    You can make use of <a href="http://www.pcreck.com">PCREck</a> to edit and test your regexes.</p>
  <section id="filters">
    <div data-dyn-entity="filters">
      <fieldset>
        <legend>Filter #<span data-dyn-substitute="index">0</span></legend>
        <label>
          Field
          <select name="filters[-1][field]">
            <option value="" data-feed="query_view" data-feed-target="value,text">
              fill me
            </option>
          </select>
        </label>
        <label>
          Value <input style="min-width:420px" type="text" name="filters[-1][value]" value="012345678" placeholder="/[^[D]]/" />
        </label>
        <label>
          Negated? <input type="checkbox" name="filters[-1][negated]" />
        </label>
        <button data-dyn-action="remove">&times;</button>
      </fieldset>
    </div>

  </section>
  <button id="save_filters">Save filters</button>
  <button class="help">?</button>
  <hr />
</div>

<section>
  <table id="myfuckingtable" class="sortable" style="text-align: left">
    <thead>
      <tr>
      </tr>
    </thead>
    <tbody data-clearable>
    </tbody>
  </table>
</section>
